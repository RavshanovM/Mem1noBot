from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import asyncpg
from functools import wraps
from datetime import datetime
import random
import aiocron
from sympy.abc import lamda

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN or not DATABASE_URL:
    raise ValueError("BOT_TOKEN and DATABASE_URL must be set in environment variables")

ALLOWED_USERS = [2041928302, 6635421234]
PUBLIC_CHANNELS = ["@MeminoMem"]
user_luck = {}
otp_video = {}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
db_pool = None

# Utility Functions
async def send_message(chat_id, text):
    await bot.send_message(chat_id=chat_id, text=text)

# Database Initialization
async def init_db_pool():
    global db_pool
    retries = 3
    for attempt in range(retries):
        try:
            db_pool = await asyncpg.create_pool(DATABASE_URL)
            logger.info("Database connection pool created successfully.")
            break
        except Exception as e:
            logger.error(f"Attempt {attempt + 1}: Failed to connect to the database: {e}")
            if attempt == retries - 1:
                raise e

async def close_db_pool():
    global db_pool
    if db_pool:
        await db_pool.close()
        db_pool = None
        logger.info("Database connection pool closed.")
    else:
        logger.warning("Database pool was not initialized, nothing to close.")

async def create_tables():
    if not db_pool:
        logger.error("Database pool is not initialized.")
        return

    async with db_pool.acquire() as conn:
        try:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS videos (
                    id SERIAL PRIMARY KEY,
                    video_id TEXT NOT NULL
                );
                CREATE TABLE IF NOT EXISTS memes (
                    id SERIAL PRIMARY KEY,
                    meme_id TEXT NOT NULL
                );
                CREATE TABLE IF NOT EXISTS stickers (
                    id SERIAL PRIMARY KEY,
                    sticker_id TEXT NOT NULL
                );
                CREATE TABLE IF NOT EXISTS voice_messages (
                    id SERIAL PRIMARY KEY,
                    voice_id TEXT NOT NULL
                );
                CREATE TABLE IF NOT EXISTS user_content (
                    user_id BIGINT NOT NULL,
                    content_id TEXT NOT NULL,
                    content_type TEXT NOT NULL,
                    source TEXT NOT NULL,
                    UNIQUE (user_id, content_id, content_type, source)
                );
                CREATE TABLE IF NOT EXISTS content_feedback (
                    id SERIAL PRIMARY KEY,
                    content_id TEXT NOT NULL,
                    content_type TEXT NOT NULL,
                    likes INTEGER DEFAULT 0,
                    dislikes INTEGER DEFAULT 0,
                    UNIQUE (content_id, content_type)
                );
                CREATE TABLE IF NOT EXISTS user_feedback (
                    user_id BIGINT NOT NULL,
                    content_id TEXT NOT NULL,
                    content_type TEXT NOT NULL,
                    feedback_type TEXT NOT NULL, -- 'like' –∏–ª–∏ 'dislike'
                    PRIMARY KEY (user_id, content_id, content_type)
                );
                CREATE TABLE IF NOT EXISTS bot_users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    joined_at TIMESTAMP DEFAULT NOW()
                );
            """)
            logger.info("Tables created successfully.")
        except Exception as e:
            logger.error(f"Error creating tables: {e}")

async def update_tables():
    if not db_pool:
        logger.error("Database pool is not initialized.")
        return

    async with db_pool.acquire() as conn:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ created_at, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await conn.execute("""
                DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1
                        FROM information_schema.columns
                        WHERE table_name = 'user_content' AND column_name = 'created_at'
                    ) THEN
                        ALTER TABLE user_content ADD COLUMN created_at TIMESTAMP DEFAULT NOW();
                    END IF;
                END $$;
            """)
            logger.info("Table user_content updated successfully.")
        except Exception as e:
            logger.error(f"Error updating tables: {e}")


# Subscription Check
async def is_subscribed(user_id: int) -> bool:
    for channel in PUBLIC_CHANNELS:
        try:
            status = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if status.status not in ["member", "administrator", "creator"]:
                return False
        except Exception as e:
            logger.error(f"Error checking channel {channel}: {e}")
            return False
    return True
def subscription_required(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if await is_subscribed(user_id):
            return await handler(message, *args, **kwargs)
        else:
            markup = InlineKeyboardMarkup()
            markup.row(
                InlineKeyboardButton('Mem1no', url='https://t.me/MeminoMem'),
                InlineKeyboardButton('\u2705 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscription')
            )
            await message.reply("Please subscribe to the channels first:", reply_markup=markup)
    return wrapper

@dp.callback_query_handler(lambda c: c.data == 'check_subscription')
async def check_subscription_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_subscribed(user_id):
        await callback_query.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    else:
        await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —á—Ç–æ –± –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã.", show_alert=True)


async def send_content(message: types.Message, content_type: str, table_name: str, uid: int = None, source: str = "command"):
    user_id = message.from_user.id
    today = datetime.now().date()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    try:
        async with db_pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
            daily_count = await conn.fetchval("""
                SELECT COUNT(*) FROM user_content
                WHERE user_id = $1 AND content_type = $2 AND source = $3 AND DATE(created_at) = $4
            """, user_id, content_type, source, today)

            if daily_count >= 15:
                await message.reply(f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 15 {content_type} –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
                return

            # –í—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if uid is not None:
                result = await conn.fetchrow(f"""
                    SELECT {content_type}_id FROM {table_name} WHERE id = $1
                """, uid)
            else:
                result = await conn.fetchrow(f"""
                    SELECT v.id, v.{content_type}_id FROM {table_name} v
                    LEFT JOIN user_content uc 
                    ON v.{content_type}_id = uc.content_id 
                    AND uc.user_id = $1 
                    AND uc.content_type = $2
                    AND uc.source = $3
                    WHERE uc.content_id IS NULL
                    ORDER BY RANDOM() LIMIT 1
                """, user_id, content_type, source)

            if result:
                content_id = result[f"{content_type}_id"]
                uid = uid or result["id"]

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
                feedback = await conn.fetchrow("""
                    SELECT likes, dislikes FROM content_feedback
                    WHERE content_id = $1 AND content_type = $2
                """, content_id, content_type)

                likes = feedback['likes'] if feedback else 0
                dislikes = feedback['dislikes'] if feedback else 0

                # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = InlineKeyboardMarkup()
                keyboard.row(
                    InlineKeyboardButton(f"üëç {likes}", callback_data=f"like_{content_type}_{uid}"),
                    InlineKeyboardButton(f"üëé {dislikes}", callback_data=f"dislike_{content_type}_{uid}")
                )

                keyboard.add(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"next_{content_type}"))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                if content_type == "video":
                    await bot.send_video(message.chat.id, content_id, reply_markup=keyboard)
                elif content_type == "meme":
                    await bot.send_photo(message.chat.id, content_id, reply_markup=keyboard)
                elif content_type == "sticker":
                    await bot.send_sticker(message.chat.id, content_id, reply_markup=keyboard)
                elif content_type == "voice":
                    await bot.send_voice(message.chat.id, content_id, reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await conn.execute("""
                    INSERT INTO user_content (user_id, content_id, content_type, source, created_at)
                    VALUES ($1, $2, $3, $4, NOW())
                    ON CONFLICT DO NOTHING
                """, user_id, content_id, content_type, source)
            else:
                await message.reply(f"No available {content_type} to send.")

    except Exception as e:
        logger.error(f"Error getting {content_type}: {e}")
        await message.reply(f"Error retrieving {content_type}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryStorage
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AddContentState(StatesGroup):
    waiting_for_content = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.message_handler(commands=['addvideo', 'addmeme', 'addsticker', 'addvoice'])
async def start_adding_content(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command = message.text.split()[0][1:]  # –£–±–∏—Ä–∞–µ–º "/"
    content_type = command[3:]  # –£–±–∏—Ä–∞–µ–º "add" –∏–∑ –∫–æ–º–∞–Ω–¥—ã

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(content_type=content_type)
    await AddContentState.waiting_for_content.set()

    await message.reply(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {content_type}, —á—Ç–æ–±—ã —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.message_handler(state=AddContentState.waiting_for_content, content_types=types.ContentTypes.ANY)
async def add_content(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    content_type = user_data.get('content_type')
    table_name = None
    content_id = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if content_type == "video" and message.video:
        table_name = "videos"
        content_id = message.video.file_id
    elif content_type == "meme" and message.photo:
        table_name = "memes"
        content_id = message.photo[-1].file_id
    elif content_type == "sticker" and message.sticker:
        table_name = "stickers"
        content_id = message.sticker.file_id
    elif content_type == "voice" and message.voice:
        table_name = "voice_messages"
        content_id = message.voice.file_id

    if not table_name or not content_id:
        await message.reply("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        async with db_pool.acquire() as conn:
            await conn.execute(f"""
                INSERT INTO {table_name} ({content_type}_id) VALUES ($1)
                ON CONFLICT DO NOTHING
            """, content_id)
        await message.reply(f"{content_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {content_type}: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {content_type}: {e}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

@dp.message_handler(commands=['menu'])
@subscription_required
async def show_menu(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    menu_keyboard.add(
        KeyboardButton('üé• –í–∏–¥–µ–æ'),
        KeyboardButton('üñºÔ∏è –ú–µ–º—ã')
    )
    menu_keyboard.add(
        KeyboardButton('üì¶ –°—Ç–∏–∫–µ—Ä—ã'),
        KeyboardButton('üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—É—Ö–∏')
    )
    menu_keyboard.add(
        KeyboardButton('üçÄ –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏'),
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=menu_keyboard)


@dp.message_handler(lambda message: message.text in ['üé• –í–∏–¥–µ–æ', 'üñºÔ∏è –ú–µ–º—ã', 'üì¶ –°—Ç–∏–∫–µ—Ä—ã', 'üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—É—Ö–∏', 'üçÄ –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏'])
async def handle_menu_selection(message: types.Message):
    if message.text == 'üé• –í–∏–¥–µ–æ':
        await handle_video_command(message)
    elif message.text == 'üñºÔ∏è –ú–µ–º—ã':
        await handle_memes_command(message)
    elif message.text == 'üì¶ –°—Ç–∏–∫–µ—Ä—ã':
        await handle_sticker(message)
    elif message.text == 'üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—É—Ö–∏':
        await handle_voice(message)
    elif message.text == 'üçÄ –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏':
        await luck(message)

@dp.message_handler(commands=['start'])
@subscription_required
async def privetsvie(message: types.Message):
    await send_message(message, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n–ë–æ—Ç —É–º–µ–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø—Ä–∏–∫–æ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ, –º–µ–º—ã, —Å—Ç–∏–∫–µ—Ä—ã, —Å–º–µ—à–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º!\n–£–¥–∞—á–∏!!!')
    await show_menu(message)



@dp.message_handler(commands=["video"])
@subscription_required
async def handle_video_command(message: types.Message):
    args = message.get_args()
    uid = int(args) if args and args.isdigit() else None
    await send_content(message, "video", "videos", uid, "command")

@dp.message_handler(commands=['memes'])
@subscription_required
async def handle_memes_command(message: types.Message):
    args = message.get_args()
    uid = int(args) if args and args.isdigit() else None
    await send_content(message, "meme", "memes", uid, "command")

@dp.message_handler(commands=['stickers', 's'])
@subscription_required
async def handle_sticker(message: types.Message):
    args = message.get_args()
    uid = int(args) if args and args.isdigit() else None
    await send_content(message, "sticker", "stickers", uid, "command")

@dp.message_handler(commands=['voice', 'vo'])
@subscription_required
async def handle_voice(message: types.Message):
    args = message.get_args()
    uid = int(args) if args and args.isdigit() else None
    await send_content(message, "voice", "voice_messages", uid, "command")

@dp.message_handler(commands=['luck'])
@subscription_required
async def luck(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now().date()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª –∫–æ–º–∞–Ω–¥—É —Å–µ–≥–æ–¥–Ω—è
    if user_id in user_luck and user_luck[user_id]['date'] == today:
        luck_score = user_luck[user_id]['luck']
        response = f"–¢–≤–æ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω: {luck_score / 2}% \U0001F340"
    else:
        # –í—ã–ø–æ–ª–Ω—è–µ–º 10 —Ä–∞–∑ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        total_luck = 0
        for _ in range(10):
            luck_score = random.randint(1, 200)
            total_luck += luck_score

        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        average_luck = total_luck // 10
        user_luck[user_id] = {'luck': average_luck, 'date': today}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —É–¥–∞—á–∏
        if average_luck <= 22:
            emoji = "\U0001F622"
            comments = ["–°–µ–≥–æ–¥–Ω—è —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –û—Ç–¥–æ—Ö–Ω–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.",
                        "–ù–µ –±–µ—Ä–∏ –≤—Å—ë –±–ª–∏–∑–∫–æ –∫ —Å–µ—Ä–¥—Ü—É, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ.",
                        "–ö–∞–∂–µ—Ç—Å—è, —É–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–µ—à–∏–ª–∞ –≤–∑—è—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π."]
        elif average_luck <= 60:
            emoji = "\U0001F641"
            comments = ["–ù–µ –ø–æ–≤–µ–∑–ª–æ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ!",
                        "–î–µ–Ω—å –Ω–µ —Å–∞–º—ã–π —É–¥–∞—á–Ω—ã–π, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è.",
                        "–£–¥–∞—á–∞ —Å–ª–µ–≥–∫–∞ –æ—Ç–≤–µ—Ä–Ω—É–ª–∞—Å—å, –Ω–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"]
        elif average_luck <= 100:
            emoji = "\U0001F610"
            comments = ["–ß—É—Ç—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –î–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º.",
                        "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –Ω–æ —Å—Ç–æ–∏—Ç –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º.",
                        "–ù–µ –ª—É—á—à–∏–π –¥–µ–Ω—å, –Ω–æ –∏ –Ω–µ —Ö—É–¥—à–∏–π."]
        elif average_luck <= 140:
            emoji = "\U0001F642"
            comments = ["–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏. –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–µ–ª.",
                        "–î–µ–Ω—å –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤.",
                        "–í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."]
        elif average_luck <= 160:
            emoji = "\U0001F603"
            comments = ["–ü–æ–≤–µ–∑–ª–æ! –î–µ–Ω—å –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–º.",
                        "–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
                        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ, –Ω–µ —É–ø—É—Å—Ç–∏ –∏—Ö!"]
        elif average_luck <= 190:
            emoji = "\U0001F604"
            comments = ["–û—Ç–ª–∏—á–Ω–∞—è —É–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —ç—Ç–∏–º —à–∞–Ω—Å–æ–º!",
                        "–°–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, –∑–≤—ë–∑–¥—ã –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.",
                        "–î–µ–Ω—å –¥–ª—è —Å–≤–µ—Ä—à–µ–Ω–∏–π, –¥–µ—Ä–∑–∞–π!"]
        else:
            emoji = "\U0001F60D"
            comments = ["–¢—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–¥–∞—á–ª–∏–≤ —Å–µ–≥–æ–¥–Ω—è!",
                        "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç–æ–π!",
                        "–£–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞ —Ç–æ–±–æ–π –≤–µ–∑–¥–µ, –≥–¥–µ –±—ã —Ç—ã –Ω–∏ –±—ã–ª."]

        comment = random.choice(comments)
        response = f"–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏: {average_luck / 2}% {emoji}\n{comment}"

    await message.reply(response)


@dp.callback_query_handler(lambda c: c.data.startswith(('like_', 'dislike_')))
async def handle_like_dislike(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    action = data[0]  # 'like' –∏–ª–∏ 'dislike'
    content_type = data[1]
    uid = int(data[2])
    user_id = callback_query.from_user.id

    try:
        async with db_pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º content_id –ø–æ uid
            result = await conn.fetchrow(f"""
                SELECT {content_type}_id FROM {content_type}s WHERE id = $1
            """, uid)
            if not result:
                await callback_query.answer("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            content_id = result[f"{content_type}_id"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
            feedback_check = await conn.fetchrow("""
                SELECT feedback_type FROM user_feedback
                WHERE user_id = $1 AND content_id = $2 AND content_type = $3
            """, user_id, content_id, content_type)

            if feedback_check:
                await callback_query.answer("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç!", show_alert=True)
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
            if action == 'like':
                await conn.execute("""
                    INSERT INTO content_feedback (content_id, content_type, likes)
                    VALUES ($1, $2, 1)
                    ON CONFLICT (content_id, content_type)
                    DO UPDATE SET likes = content_feedback.likes + 1
                """, content_id, content_type)
                feedback_type = 'like'
            elif action == 'dislike':
                await conn.execute("""
                    INSERT INTO content_feedback (content_id, content_type, dislikes)
                    VALUES ($1, $2, 1)
                    ON CONFLICT (content_id, content_type)
                    DO UPDATE SET dislikes = content_feedback.dislikes + 1
                """, content_id, content_type)
                feedback_type = 'dislike'

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("""
                INSERT INTO user_feedback (user_id, content_id, content_type, feedback_type)
                VALUES ($1, $2, $3, $4)
            """, user_id, content_id, content_type, feedback_type)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
            feedback = await conn.fetchrow("""
                SELECT likes, dislikes FROM content_feedback
                WHERE content_id = $1 AND content_type = $2
            """, content_id, content_type)
            likes = feedback['likes']
            dislikes = feedback['dislikes']

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton(f"üëç {likes}", callback_data=f"like_{content_type}_{uid}"),
                InlineKeyboardButton(f"üëé {dislikes}", callback_data=f"dislike_{content_type}_{uid}")
            )
            keyboard.add(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"next_{content_type}"))

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=keyboard
            )

            await callback_query.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {action}: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –ª–∞–π–∫–æ–≤, –¥–∏–∑–ª–∞–π–∫–æ–≤ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
@dp.callback_query_handler(lambda c: c.data.startswith(('like_', 'dislike_', 'next_')))
async def handle_callback_query(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    action = data[0]  # like, dislike, next
    content_type = data[1]  # video, meme, voice

    if action == 'next':
        await send_content(callback_query.message, content_type, f"{content_type}s")
        await callback_query.answer()



@dp.message_handler(commands=['delete_all_videos'])
async def delete_all_videos(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with db_pool.acquire() as conn:
            await conn.execute("DELETE FROM videos")
        await message.reply("–í—Å–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ: {e}")


@dp.message_handler(commands=['get_all_video_ids'])
async def get_all_video_ids(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("SELECT video_id FROM videos")
            if rows:
                video_ids = "\n".join(row["video_id"] for row in rows)
                await message.reply(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ ID:\n{video_ids}")
            else:
                await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –≤–∏–¥–µ–æ: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∏–¥–µ–æ: {e}")

@dp.message_handler(commands=['get_all_memes_ids'])
async def get_all_memes_ids(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("SELECT meme_id FROM memes")
            if rows:
                meme_ids = "\n".join(row["meme_id"] for row in rows)
                await message.reply(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ–º—ã ID:\n{meme_ids}")
            else:
                await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–º–æ–≤.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –º–µ–º–∞: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –º–µ–º–æ–≤: {e}")

@dp.message_handler(commands=['get_all_stickers_ids'])
async def get_all_stickers_ids(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("SELECT sticker_id FROM stickers")
            if rows:
                sticker_ids = "\n".join(row["sticker_id"] for row in rows)
                await message.reply(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã ID:\n{sticker_ids}")
            else:
                await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")

@dp.message_handler(commands=['get_all_voice_ids'])
async def get_all_voice_ids(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("SELECT voice_id FROM voice_messages")
            if rows:
                voice_ids = "\n".join(row["voice_id"] for row in rows)
                await message.reply(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã ID:\n{voice_ids}")
            else:
                await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–ª–æ—Å–æ–≤—É—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –≥–æ–ª–æ—Å–∞: {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")

class BroadcastState(StatesGroup):
    broadcasting = State()

@dp.message_handler(commands=['start'])
async def register_user(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO bot_users (user_id, username)
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO NOTHING
        """, user_id, username)
    await message.reply("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

@dp.message_handler(commands=['otpravka'])
async def start_broadcast(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.reply("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ `/stop`.")
    await BroadcastState.broadcasting.set()

@dp.message_handler(state=BroadcastState.broadcasting, commands=['stop'])
async def stop_broadcasting(message: types.Message, state: FSMContext):
    await message.reply("–†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await state.finish()

@dp.message_handler(state=BroadcastState.broadcasting)
async def broadcast_message(message: types.Message, state: FSMContext):
    async with db_pool.acquire() as conn:
        users = await conn.fetch("SELECT user_id FROM bot_users")
        count = 0
        for user in users:
            try:
                await bot.copy_message(chat_id=user['user_id'], from_chat_id=message.chat.id, message_id=message.message_id)
                count += 1
            except Exception as e:
                logging.error(f"Failed to send message to {user['user_id']}: {e}")

    await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@aiocron.crontab('0 12 * * *')  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00
async def scheduled_daily_video():
    async with db_pool.acquire() as conn:
        users = await conn.fetch("SELECT user_id FROM bot_users")
        for user in users:
            try:
                # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ handle_video_command
                class FakeMessage:
                    def __init__(self, user_id):
                        self.from_user = types.User(id=user_id, is_bot=False, first_name="User")
                        self.chat = types.Chat(id=user_id, type="private")
                        self.text = "/video"
                        self.get_args = lambda: ""  # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

                fake_message = FakeMessage(user['user_id'])
                await handle_video_command(fake_message)
            except Exception as e:
                logger.error(f"Error sending daily video to user {user['user_id']}: {e}")

from aiocron import crontab

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db_pool()
    await create_tables()
    await update_tables()
    crontab('0 12 * * *')(scheduled_daily_video)
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling()
    finally:
        await close_db_pool()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
    asyncio.run(main())
    executor.start_polling(dp, skip_updates=True)  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤
